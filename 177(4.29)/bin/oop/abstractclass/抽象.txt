1.抽象类
  a)概念:是客观存在的一类事物，但是这类事物不存在具体的实例，是抽象的。
          例如:图形,东西，动物
  b)语法：
     public abstract class 类名{
     
     }
  c)抽象类的特性：
    (1)抽象类不是一个具体的类，不能进行实例化(对象)
    (2)抽象类可以有抽象方法也可以没有。 
            抽象方法：a)使用abstract关键字修饰 b)无方法体
    (3)有抽象方法的类的一定是抽象类。 反之不成立。
    (4)如果子类继承了抽象类，而不去实现抽象类，那么子类也是抽象类。
    (5)如果抽象类没有定义构造器，那么javac会自动加上无参构造器。
    (6)如果有有参构造器，也需要显示声明无参构造器。    
  
  d)应用场景
       用于分析与设计
  e)抽象类与类之间的区别
      相同点：1) 使用class关键字定义 包含属性和方法。
          2)都可以方法重载
          3)没有提供构造器，javac会自动加上无参构造器。
          4)子类都可以重写父类的方法。
          5)子类创建对象过程中，需要调用父类的构造器。
          6)都可以定义变量指向子类的对象。
          7)子类可以是抽象类或类。
    不同点: a)抽象类不能实例化
          b)抽象类可以包含抽象方法。
 
 2.JavaBean规范
   a.规范的内容
      (1)有包
      (2)必须为属性提供getter setter方法.属性私有f化
      (3)实现序列化接口(IO讲)
      (4)提供无参构造器
      (5)重写hashCode,equals,toString方法
   b.javaBean规范的应用：
       一般应用在实体类。
   
   c.pojo 原始的对象  plain old java Object    
       
 3.接口
   a)概念: 一个标准，一组行为规范。  
   				和抽象类类似，用来定义、约束类中的行为。
   b)作用: 解耦合  降低类与类之间的关联度。    
   
   c)接口语法:
      (1)定义接口的语法:
       interface  接口名{
           //常量
           //抽象方法
       }
      (2)实现接口的语法
         class 类名  implements 接口1,接口2{
         
         }
      注意：1.java类可以实现多个接口 但是只能继承一个类  java是单继承的。
    d)接口的特性
       1)不能实例化
       2)包含的方法全部是抽象方法   属性都是常量。
       3)接口中的属性 javac会自动加上
          public static final
       4)接口中的方法: public abstract
       5)实现类需要实现接口中的所有方法。
       6)接口可以继承多个接口
       7)接口可以定义引用指向实现类的对象(接口的多态)
              总结:引用多态 a)作为引用 b)作为参数 c)作为返回值
          
 4.软件的设计原则
     a)高内聚 低耦合        
             高内聚: 类的内部 关联度越高越好。
             低耦合: 类与类之间，关联度 越低越好
     b)实现方式
             高内聚：一个类只做一件事情
             低耦合: 面向接口编程
     c)面向接口编程           
   
 5.面向接口编程实现步骤：
    1.提取接口(设计)   根据需求 找关系 is-a.(父类,接口)
              根据问题研究重点 重点研究对象作为父类  次重点对象作为接口
    2.定义接口  (定义方法)
    
    3.实现接口
     
    4.使用接口 (接口多态: 引用，参数，返回值)
    
    注意: 1)继承和实现 在设计阶段  先设计子类(实现类) 然后在去设计父类(接口)
        2)编码先创建父类(接口)在创建子类(实现类)
  案例:开发这样一个小系统,包含类型:教员、中心、打印机,
	具体要求如下:
 		教员、以及中心都具有方法:输出详细信息
 		中心具有属性打印机,能够通过中心的打印机打印教员或中心的详细信息
 		系统要具备良好的可扩展性与可维护性

     名词： 教员 中心  打印机
     动词:  教员：输出 中心：输出  中心:去打印   打印机:打印        
   找关系: 中心:打印机  
  可维护性与可扩展性：面向接口编程      
  
   类：教员 方法:输出,
         中心 属性：打印机  方法:输出  
           
  接口:打印机 :打印
  
 
 
  
   
  
  
  
   
   
   
   
   
  
  
  
  
    
        
        
        
        
    
    
    
    
   
   
   
   
       
          
  
  
  
  
  
         